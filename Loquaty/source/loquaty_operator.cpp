
#include <loquaty.h>

using namespace	Loquaty ;


// 演算子優先度
const Symbol::OperatorDesc
		Symbol::s_OperatorDescs[Symbol::opOperatorCount] =
{
	{	opAdd,				L"+",	false,	true,	nullptr,	L"add",
									priorityAdd,	priorityPrefix,	priorityNo,	opInvalid	},
	{	opSub,				L"-",	false,	true,	nullptr,	L"sub",
									priorityAdd,	priorityPrefix,	priorityNo,	opInvalid	},
	{	opMul,				L"*",	false,	true,	nullptr,	L"mul",
									priorityMul,	priorityPrefix,	priorityNo,	opInvalid	},
	{	opDiv,				L"/",	false,	true,	nullptr,	L"div",
									priorityMul,	priorityNo,		priorityNo,	opInvalid	},
	{	opMod,				L"%",	false,	true,	nullptr,	L"mod",
									priorityMul,	priorityNo,		priorityNo,	opInvalid	},
	{	opBitAnd,			L"&",	false,	true,	nullptr,	L"and",
									priorityBitAnd,	priorityNo,		priorityNo,	opInvalid	},
	{	opBitOr,			L"|",	false,	true,	nullptr,	L"or",
									priorityBitOr,	priorityNo,		priorityNo,	opInvalid	},
	{	opBitXor,			L"^",	false,	true,	nullptr,	L"xor",
									priorityBitXor,	priorityNo,		priorityNo,	opInvalid	},
	{	opBitNot,			L"~",	false,	true,	nullptr,	L"not",
									priorityNo,		priorityPrefix,	priorityNo,	opInvalid	},
	{	opShiftRight,		L">>",	false,	true,	nullptr,	L"shr",
									priorityBitShift,	priorityNo,	priorityNo,	opInvalid	},
	{	opShiftLeft,		L"<<",	false,	true,	nullptr,	L"shl",
									priorityBitShift,	priorityNo,	priorityNo,	opInvalid	},
	{	opEqual,			L"==",	false,	true,	nullptr,	L"eq",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opNotEqual,			L"!=",	false,	true,	nullptr,	L"ne",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opLessEqual,		L"<=",	false,	true,	nullptr,	L"le",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opLessThan,			L"<",	false,	true,	nullptr,	L"lt",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opGraterEqual,		L">=",	false,	true,	nullptr,	L"ge",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opGraterThan,		L">",	false,	true,	nullptr,	L"gt",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opEqualPtr,			L"===",	false,	true,	nullptr,	L"eqp",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opNotEqualPtr,		L"!==",	false,	true,	nullptr,	L"nep",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opLogicalAnd,		L"&&",	false,	true,	nullptr,	L"land",
									priorityLogicalAnd,	priorityNo,	priorityNo,	opInvalid	},
	{	opLogicalOr,		L"||",	false,	true,	nullptr,	L"lor",
									priorityLogicalOr,	priorityNo,	priorityNo,	opInvalid	},
	{	opLogicalNot,		L"!",	false,	true,	nullptr,	L"lnot",
									priorityNo,		priorityPrefix,	priorityNo,	opInvalid	},
	{	opIncrement,		L"++",	true,	true,	nullptr,	L"inc",
									priorityNo,	priorityPrefix,	priorityPostfix, opInvalid	},
	{	opDecrement,		L"--",	true,	true,	nullptr,	L"dec",
									priorityNo,	priorityPrefix, priorityPostfix, opInvalid	},
	{	opStore,			L"=",	true,	true,	nullptr,	L"mov",
									priorityStore,	priorityNo,		priorityNo,	opInvalid	},
	{	opStoreMove,		L":=",	true,	true,	nullptr,	L"smov",
									priorityStore,	priorityNo,		priorityNo,	opStore	},
	{	opStoreAdd,			L"+=",	true,	true,	nullptr,	L"sadd",
									priorityStore,	priorityNo,		priorityNo,	opAdd	},
	{	opStoreSub,			L"-=",	true,	true,	nullptr,	L"ssub",
									priorityStore,	priorityNo,		priorityNo,	opSub	},
	{	opStoreMul,			L"*=",	true,	true,	nullptr,	L"smul",
									priorityStore,	priorityNo,		priorityNo,	opMul	},
	{	opStoreDiv,			L"/=",	true,	true,	nullptr,	L"sdiv",
									priorityStore,	priorityNo,		priorityNo,	opDiv	},
	{	opStoreMod,			L"%=",	true,	true,	nullptr,	L"smod",
									priorityStore,	priorityNo,		priorityNo,	opMod	},
	{	opStoreBitAnd,		L"&=",	true,	true,	nullptr,	L"sand",
									priorityStore,	priorityNo,		priorityNo,	opBitAnd	},
	{	opStoreBitOr,		L"|=",	true,	true,	nullptr,	L"sor",
									priorityStore,	priorityNo,		priorityNo,	opBitOr	},
	{	opStoreBitXor,		L"^=",	true,	true,	nullptr,	L"sxor",
									priorityStore,	priorityNo,		priorityNo,	opBitXor	},
	{	opStoreShiftRight,	L">>=",	true,	true,	nullptr,	L"sshr",
									priorityStore,	priorityNo,		priorityNo,	opShiftRight	},
	{	opStoreShiftLeft,	L"<<=",	true,	true,	nullptr,	L"sshl",
									priorityStore,	priorityNo,		priorityNo,	opShiftLeft	},
	{	opStaticMemberOf,	L"::",	false,	false,	nullptr,	nullptr,
									priorityMemberName,	priorityPrefix,	priorityNo,	opInvalid	},
	{	opMemberOf,			L".",	false,	false,	nullptr,	nullptr,
									priorityMember,	priorityNo,		priorityNo,	opInvalid	},
	{	opMemberCallOf,		L".*",	false,	false,	nullptr,	nullptr,
									priorityMemberCall,	priorityNo,	priorityNo,	opInvalid	},
	{	opParenthesis,		L"(",	false,	false,	nullptr,	nullptr,
									priorityParenthesis,	priorityNo,	priorityNo,	opInvalid	}, // ()
	{	opBracket,			L"[",	false,	true,	L"]",	L"at",
									priorityParenthesis,	priorityNo,	priorityNo,	opInvalid	}, // []
	{	opInstanceOf,		L"instanceof", false, false, nullptr, L"instanceof",
									priorityComparator,	priorityNo,	priorityNo,	opInvalid	},
	{	opSizeOf,			L"sizeof", false, false, nullptr,	L"sizeof",
									priorityNo,		priorityPrefix,	priorityNo,	opInvalid	},
	{	opNew,				L"new",	false,	false,	nullptr,	L"new",
									priorityNo,		priorityPrefix,	priorityNo,	opInvalid	},
	{	opFunction,			L"function", false,	false, nullptr, nullptr,
									priorityNo,		priorityPrefix,	priorityNo,	opInvalid	},
	{	opConditional,		L"?",	false,	false,	nullptr,	nullptr,
									priorityConditional, priorityNo,priorityNo,	opInvalid	},
	{	opSeparator,		L":",	false,	false,	nullptr,	nullptr,
									priorityConditional, priorityNo,priorityNo,	opInvalid	},
	{	opSequencing,		L",",	false,	false,	nullptr,	nullptr,
									priorityList,	priorityNo,		priorityNo,	opInvalid	},
	{	opEndOfStatement,	L";",	false,	false,	nullptr,	nullptr,
									priorityNo,		priorityNo,	priorityLowest,	opInvalid	},
} ;

